// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  groups            Group[]          @relation("GroupMembers")
  createdGroups     Group[]          @relation("GroupCreator")
  expensesPaid      Expense[]        @relation("ExpensePayer")
  expenseSplits     ExpenseSplit[]
  settlementsFrom   Settlement[]     @relation("SettlementFrom")
  settlementsTo     Settlement[]     @relation("SettlementTo")

  @@map("users")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  // Relations
  createdBy   User         @relation("GroupCreator", fields: [createdById], references: [id])
  members     User[]       @relation("GroupMembers")
  expenses    Expense[]
  settlements Settlement[]

  @@map("groups")
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime @default(now())
  splitType   String   @default("EQUAL") // EQUAL, PERCENTAGE, SHARES, EXACT
  groupId     String
  paidById    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  group  Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidBy User           @relation("ExpensePayer", fields: [paidById], references: [id])
  splits ExpenseSplit[]

  @@map("expenses")
}

model ExpenseSplit {
  id         String   @id @default(cuid())
  expenseId  String
  userId     String
  amount     Float
  percentage Float?
  shares     Int?
  createdAt  DateTime @default(now())

  // Relations
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("expense_splits")
}

model Settlement {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  amount     Float
  groupId    String
  settled    Boolean  @default(false)
  settledAt  DateTime?
  createdAt  DateTime @default(now())

  // Relations
  fromUser User  @relation("SettlementFrom", fields: [fromUserId], references: [id])
  toUser   User  @relation("SettlementTo", fields: [toUserId], references: [id])
  group    Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("settlements")
}
